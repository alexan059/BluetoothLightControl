import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;
import java.util.UUID;

public class MainActivity extends AppCompatActivity implements Button.OnClickListener{

    private static final String TAG = MainActivity.class.getName();
    private static final int REQUEST_ENABLE_BT = 1;
    private static final String ACTION_PAIRING_REQUEST = "android.bluetoothdevice.action.PAIRING_REQUEST";


    private static final String BT_DEVICE_NAME = "";
    private static final String BT_DEVICE_PIN = "";

    private static final String BT_CONNECTION_UUID = "00001101-0000-1000-8000-00805f9b34fb";

    BluetoothAdapter mBluetoothAdapter;
    ConnectedThread mBluetoothConncetion;
    Handler mHandler;

    TextView tvStatus;
    Button btOn;
    Button btOff;

    private static final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                String deviceName = device.getName();
                String deviceAddress = device.getAddress();

                //pairDevice(context, device);

                Log.d(TAG, "Discovery: Device found | " + deviceName + " | " + deviceAddress);
            }
        }
    };

    public static void pairDevice(Context context, BluetoothDevice device) {

        Intent intent = new Intent(ACTION_PAIRING_REQUEST);

        String EXTRA_DEVICE = "android.bluetooth.device.DEVICE";
        intent.putExtra(EXTRA_DEVICE, device);

        String EXTRA_PAIRING_VARIANT = "anrdoid.bluetooth.device.extra.PAIRING_VARIANT";
        int PAIRING_VARIANT_PIN = 5959;
        intent.putExtra(EXTRA_PAIRING_VARIANT, PAIRING_VARIANT_PIN);

        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        context.startActivity(intent);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mBluetoothConncetion = null;

        btOn = (Button) findViewById(R.id.btOn);
        btOff = (Button) findViewById(R.id.btOff);
        tvStatus = (TextView) findViewById(R.id.tvStatus);

        mHandler = new Handler() {
            MainActivity mainActivity;

            @Override
            public void handleMessage(Message msg) {
                if (mainActivity != null) {
                    mainActivity.tvStatus.setText(msg.toString());
                }
            }
        };

        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        registerReceiver(mReceiver, filter);

        initBluetooth();
    }

    @Override
    protected void onStop() {
        super.onStop();

        mBluetoothAdapter.cancelDiscovery();

        if (mBluetoothConncetion != null) {
            mBluetoothConncetion.cancel();

            btOff.setOnClickListener(null);
            btOn.setOnClickListener(null);

            // btOn.setVisibility(View.GONE);
            // btOff.setVisibility(View.GONE);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        unregisterReceiver(mReceiver);
    }

    private void initBluetooth() {
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        if (mBluetoothAdapter == null) {
            Log.d(TAG, "Device doesn't support bluetooth.");
        }

        if (!mBluetoothAdapter.isEnabled()) {

            mBluetoothAdapter.enable();

            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        } else {
            startBluetoothConnection(RESULT_OK);
        }
    }

    private void startBluetoothConnection(int status) {
        if (status == RESULT_OK) {
            findBluetoothDevice();
        } else if (status == RESULT_CANCELED) {
            Log.d(TAG, "Bluetooth request cancelled.");
        }
    }

    private void findBluetoothDevice() {
        Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();

        mBluetoothAdapter.startDiscovery();
        Log.d(TAG, "Start discovery");

        if (pairedDevices.size() > 0) {
            for (BluetoothDevice device : pairedDevices) {
                String deviceName = device.getName();
                String deviceHardwareAddress = device.getAddress();

                if (deviceName.equals(BT_DEVICE_NAME)) {
                    tvStatus.setText(deviceName);

                    Log.d(TAG, "Device: " + deviceName + " | " + deviceHardwareAddress);

                    connectToBluetoothDevice(device);

                    mBluetoothAdapter.cancelDiscovery();
                }
            }
        }
    }

    private void connectToBluetoothDevice(BluetoothDevice device) {
        ConnectThread mConnector = new ConnectThread(device);
        mConnector.start();
    }

    private void handleBluetoothConnection(BluetoothSocket socket) {
        mBluetoothConncetion = new ConnectedThread(socket);
        mBluetoothConncetion.start();

        btOn.setOnClickListener(this);
        btOff.setOnClickListener(this);

        // btOn.setVisibility(View.VISIBLE);
        // btOff.setVisibility(View.VISIBLE);
        //tvStatus.setText("Connected");
    }

    @Override
    public void onClick(View v) {
        String commandOn = "lightswitch958on";
        String commandOff = "lightswitch958off";

        switch (v.getId()) {
            case R.id.btOn:
                mBluetoothConncetion.write(commandOn.getBytes());
                break;
            case R.id.btOff:
                mBluetoothConncetion.write(commandOff.getBytes());
                break;
        }
    }

    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;

        public ConnectThread(BluetoothDevice device) {
            BluetoothSocket tmp = null;
            mmDevice = device;

            try {
                tmp = device.createRfcommSocketToServiceRecord(UUID.fromString(BT_CONNECTION_UUID));

            } catch (IOException e) {
                Log.e(TAG, "Socket's create() method failed", e);
            }

            mmSocket = tmp;
        }

        public void run() {
            mBluetoothAdapter.cancelDiscovery();

            try {
                mmSocket.connect();
            } catch (IOException connectException) {
                Log.e(TAG, "Unable to connect", connectException);

                try {
                    mmSocket.close();
                } catch (IOException closeException) {
                    Log.e(TAG, "Unable to close client socket", closeException);
                }

                return;
            }

            Log.d(TAG, "Successfully connected to " + mmDevice.getName());
            handleBluetoothConnection(mmSocket);
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException closeException) {
                Log.e(TAG, "Unable to close client socket", closeException);
            }
        }
    }

    private interface MessageConstants {
        public static final int MESSAGE_READ = 0;
        public static final int MESSAGE_WRITE = 1;
        public static final int MESSAGE_TOAST = 2;
    }

    private class ConnectedThread extends Thread {
        private final BluetoothSocket mmSocket;
        //private final InputStream mmInStream;
        private final OutputStream mmOutStream;
        private byte[] mmBuffer;

        public ConnectedThread(BluetoothSocket socket) {
            mmSocket = socket;
            //InputStream tmpIn = null;
            OutputStream tmpOut = null;

            /*try {
                tmpIn = socket.getInputStream();
            } catch (IOException e) {
                Log.e(TAG, "Error occured creating input stream", e);
            }*/

            try {
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                Log.e(TAG, "Error occured creating output stream", e);
            }

            //mmInStream = tmpIn;
            mmOutStream = tmpOut;
        }

        public void run() {
            /*mmBuffer = new byte[1024];
            int numBytes;

            while (true) {
                try {
                    numBytes = mmInStream.read(mmBuffer);
                    Message readMsg = mHandler.obtainMessage(MessageConstants.MESSAGE_READ, numBytes, -1, mmBuffer);
                    readMsg.sendToTarget();
                } catch (IOException e) {
                    Log.d(TAG, "Input stream was disconnected", e);
                    break;
                }
            }*/
        }

        public void write(byte[] bytes) {
            try {
                mmOutStream.write(bytes);

                Message writtenMsg = mHandler.obtainMessage(MessageConstants.MESSAGE_WRITE, -1, -1, mmBuffer);
                writtenMsg.sendToTarget();
            } catch (IOException e) {
                Log.d(TAG, "Error occurred when sending data", e);

                Message writeErrorMsg = mHandler.obtainMessage(MessageConstants.MESSAGE_TOAST);
                Bundle bundle = new Bundle();
                bundle.putString("toast", "Couldn't send data to the other device");
                writeErrorMsg.setData(bundle);
                mHandler.sendMessage(writeErrorMsg);
            }
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException closeException) {
                Log.e(TAG, "Unable to close client socket", closeException);
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        switch (requestCode) {
            case REQUEST_ENABLE_BT:
                startBluetoothConnection(resultCode);
                break;
            default:
                Log.d(TAG, "onActivityResult | requestCode: " + requestCode + ", resultCode: " + requestCode);
        }
    }
}
